{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Outils ROK4 Python","text":"<p>Ce projet contient des outils de gestion des pyramides de donn\u00e9es, \u00e9crits en Python.</p>"},{"location":"#installer-les-outils","title":"Installer les outils","text":"<p>Installations syst\u00e8me requises :</p> <ul> <li>debian : <code>apt install python3-rados python3-gdal</code></li> </ul> <p>Depuis PyPI : <code>pip install rok4-tools</code></p> <p>Depuis GitHub : <code>pip install https://github.com/rok4/pytools/releases/download/1.3.2/rok4_tools-1.3.2-py3-none-any.whl</code></p> <p>L'environnement d'ex\u00e9cution doit avoir acc\u00e8s aux librairies syst\u00e8me. Dans le cas d'une utilisation au sein d'un environnement python, pr\u00e9cisez bien \u00e0 la cr\u00e9ation <code>python3 -m venv --system-site-packages .venv</code>.</p>"},{"location":"#utiliser-les-outils","title":"Utiliser les outils","text":""},{"location":"#pyr2pyr","title":"PYR2PYR","text":"<p>PYR2PYR est un outil de copie d'une pyramide d'un stockage \u00e0 un autre. Il est possible de filtrer les dalles transf\u00e9r\u00e9e en pr\u00e9cisant une taille limite sous laquelle les donn\u00e9es ne sont pas recopi\u00e9es. La copie des dalles est parall\u00e9lisable. Si des signatures MD5 sont pr\u00e9sente dans le fichier liste, elles sont contr\u00f4l\u00e9es apr\u00e8s recopie.</p> <p>Un exemple de configuration est affichable avec la commande <code>pyr2pyr --role example</code> et l'appel <code>pyr2pyr --role check --conf conf.json</code> permet de valider un fichier de configuration. Le fichier de configuration peut \u00eatre un objet, auquel cas le chemin doit \u00eatre pr\u00e9fix\u00e9 par le type de stockage (exemple : <code>s3://bucket/configuration.json</code>)</p>"},{"location":"#fonctionnement","title":"Fonctionnement","text":"<p>Une copie compl\u00e8te d'une pyramide implique l'utilisation de l'outil avec les 3 modes suivants, dans cet ordre (tous les modes utilisent le fichier de configuration) :</p> <ol> <li>R\u00f4le <code>master</code><ul> <li>Actions : g\u00e9n\u00e9ration des N TODO lists, d\u00e9pos\u00e9 dans un dossier pr\u00e9cis\u00e9 dans la configuration (peut \u00eatre un stockage objet).</li> <li>Appel : <code>pyr2pyr --role master --conf conf.json</code></li> </ul> </li> <li>R\u00f4le <code>agent</code> :<ul> <li>Actions : lecture de la TODO list depuis le dossier de traitement et recopie des dalles</li> <li>Appel (un appel par TODO list) : <code>pyr2pyr --role agent --conf conf.json --split X</code></li> </ul> </li> <li>R\u00f4le <code>finisher</code> :<ul> <li>Actions : lecture des TODO lists pour \u00e9crire le fichier liste final et \u00e9criture du descripteur de la pyramide en sortie.</li> <li>Appel : <code>pyr2pyr --role finisher --conf conf.json</code></li> </ul> </li> </ol> <p></p>"},{"location":"#configuration","title":"Configuration","text":"<p>Possibilit\u00e9s de contenu du fichier JSON (g\u00e9n\u00e9r\u00e9 \u00e0 partir du sch\u00e9ma JSON avec <code>jsonschema2md bin/pyr2pyr.schema.json /dev/stdout</code>)</p> <ul> <li><code>logger</code> (object): Logger configuration.<ul> <li><code>layout</code> (string): Log format, according to logging python library. Default: <code>%(asctime)s %(levelname)s: %(message)s</code>.</li> <li><code>file</code> (string): Path to log file. Standard output is used if not provided.</li> <li><code>level</code> (string): Log level. Must be one of: <code>['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL', 'NOTSET']</code>. Default: <code>WARNING</code>.</li> </ul> </li> <li><code>from</code> (object): Pyramid to copy.<ul> <li><code>descriptor</code> (string): Path to pyramid's descriptor to copy.</li> </ul> </li> <li><code>to</code> (object): Pyramid to write.<ul> <li><code>name</code> (string): Output pyramid's name.</li> <li><code>storage</code> (object)<ul> <li><code>type</code> (string): Storage type. Must be one of: <code>['FILE', 'S3', 'CEPH']</code>.</li> <li><code>root</code> (string): Storage root : a directory for FILE storage, pool name for CEPH storage, bucket name for S3 storage.</li> <li><code>depth</code> (integer): Tree depth, only for FILE storage. Minimum: <code>1</code>. Default: <code>2</code>.</li> </ul> </li> </ul> </li> <li><code>process</code> (object): Processing parameters.<ul> <li><code>directory</code> (string): Directory to write copies to process, FILE directory or S3/CEPH prefix.</li> <li><code>parallelization</code> (integer): Parallelization level, number of todo lists and agents working at the same time. Minimum: <code>1</code>. Default: <code>1</code>.</li> <li><code>follow_links</code> (boolean): Do we follow links (data slabs in others pyramids than the 'from' one). Default: <code>False</code>.</li> <li><code>slab_limit</code> (integer): Minimum slab size (if under, we do not copy). Minimum: <code>0</code>. Default: <code>0</code>.</li> </ul> </li> </ul>"},{"location":"#make-layer","title":"MAKE-LAYER","text":"<p>MAKE-LAYER est un outil g\u00e9n\u00e9rant un descripteur de couche compatible avec le serveur \u00e0 partir des pyramides de donn\u00e9es \u00e0 utiliser</p> <p>Utilisation : <code>make-layer [-h] --pyramids storage://path/to/pyr.json[&gt;BOTTOM&gt;TOP] [storage://path/to/pyr.json[&gt;BOTTOM&gt;TOP] ...] --name my data [--styles normal [normal ...]] [--title my data]</code></p>"},{"location":"#joincache","title":"JOINCACHE","text":"<p>L'outil JOINCACHE g\u00e9n\u00e8rent une pyramide raster \u00e0 partir d'autres pyramide raster compatibles (m\u00eame TMS, dalles de m\u00eame dimensions, canaux au m\u00eame format). La composition se fait verticalement (choix des pyramides sources par niveau) et horizontalement (choix des pyramides source par zone au sein d'un niveau).</p> <p>Un exemple de configuration est affichable avec la commande <code>joincache --role example</code> et l'appel <code>joincache --role check --conf conf.json</code> permet de valider un fichier de configuration. Le fichier de configuration peut \u00eatre un objet, auquel cas le chemin doit \u00eatre pr\u00e9fix\u00e9 par le type de stockage (exemple : <code>s3://bucket/configuration.json</code>)</p>"},{"location":"#fonctionnement_1","title":"Fonctionnement","text":"<p>Une copie compl\u00e8te d'une pyramide implique l'utilisation de l'outil avec les 3 modes suivants, dans cet ordre (tous les modes utilisent le fichier de configuration) :</p> <ol> <li>R\u00f4le <code>master</code><ul> <li>Actions : contr\u00f4le du fichier de configuration et des pyramides, identification du travail, g\u00e9n\u00e9ration des N TODO lists, d\u00e9pos\u00e9 dans un dossier pr\u00e9cis\u00e9 dans la configuration (peut \u00eatre un stockage objet).</li> <li>Appel : <code>joincache --role master --conf conf.json</code></li> </ul> </li> <li>R\u00f4le <code>agent</code> :<ul> <li>Actions : lecture de la TODO list depuis le dossier de traitement et traitement de chaque ligne</li> <li>Appel (un appel par TODO list) : <code>joincache --role agent --conf conf.json --split X</code></li> </ul> </li> <li>R\u00f4le <code>finisher</code> :<ul> <li>Actions : lecture des TODO lists pour \u00e9crire le fichier liste final et \u00e9criture du descripteur de la pyramide en sortie.</li> <li>Appel : <code>joincache --role finisher --conf conf.json</code></li> </ul> </li> </ol>"},{"location":"#configuration_1","title":"Configuration","text":"<p>Possibilit\u00e9s de contenu du fichier JSON (g\u00e9n\u00e9r\u00e9 \u00e0 partir du sch\u00e9ma JSON avec <code>jsonschema2md src/rok4_tools/joincache_utils/schema.json /dev/stdout</code>)</p> <ul> <li><code>logger</code> (object): Param\u00e8tres du logger.</li> <li><code>layout</code> (string): Format du log, selon la syntaxe Log4perl. Default: <code>%5p : %m (%M) %n</code>.</li> <li><code>file</code> (string): Chemin vers le fichier o\u00f9 \u00e9crire les logs. Les logs sont dans la sortie standard si ce param\u00e8tre n'est pas fourni.</li> <li><code>level</code> (string): Niveau de log. Must be one of: <code>['DEBUG', 'INFO', 'WARN', 'ERROR', 'ALWAYS']</code>. Default: <code>WARN</code>.</li> <li><code>datasources</code> (array): Pyramides sources.</li> <li>Items (object)<ul> <li><code>bottom</code> (string): Niveau du TMS de la pyramide en sortie pour lequel la source est utilis\u00e9e.</li> <li><code>top</code> (string): Niveau du TMS de la pyramide en sortie jusqu'auquel la source sera utilis\u00e9e.</li> <li><code>source</code> (object): Base PostgreSQL comme source de donn\u00e9es.</li> <li><code>type</code> (string): Type de source. Must be one of: <code>['PYRAMIDS']</code>.</li> <li><code>descriptors</code> (array): Liste des chemins vers les descripteurs de pyramides (toutes doivent avoir les m\u00eame caract\u00e9ristiques (stockage, pixel, TMS...).<ul> <li>Items (string)</li> </ul> </li> </ul> </li> <li><code>pyramid</code> (object): G\u00e9n\u00e9ration d'une nouvelle pyramide comme produit de fusion.</li> <li><code>name</code> (string): Nom de la nouvelle pyramide fusionn\u00e9e.</li> <li><code>root</code> (string): Racine de stockage : un dossier pour le type FILE, le nom du pool en CEPH, le nom du bucket en S3 et le nom du container en SWIFT.</li> <li><code>mask</code> (boolean): Doit-on \u00e9crire les masques de donn\u00e9es dans la pyramide en sortie. Si oui, ils seront utilis\u00e9s dans les traitements. Default: <code>False</code>.</li> </ul>"},{"location":"#compiler-la-suite-doutils","title":"Compiler la suite d'outils","text":"<pre><code>apt install python3-venv python3-rados python3-gdal\npython3 -m venv .venv\nsource .venv/bin/activate\npython3 -m pip install --upgrade build bump2version\nbump2version --current-version 0.0.0 --new-version 1.3.2 patch\n\n# Run unit tests\npython3 -m pip install -e .[test]\n# To use system installed modules rados and osgeo\necho \"/usr/lib/python3/dist-packages/\" &gt;.venv/lib/python3.10/site-packages/system.pth\npython3 -c 'import sys; print (sys.path)'\n# Run tests\ncoverage run -m pytest\n# Get tests report and generate site\ncoverage report -m\ncoverage html -d dist/tests/\n\n# Build documentation\npython3 -m pip install -e .[doc]\npdoc3 --html --output-dir dist/ rok4_tools\n\n# Build artefacts\npython3 -m build\n</code></pre>"},{"location":"#contribuer","title":"Contribuer","text":"<ul> <li> <p>Installer les d\u00e9pendances de d\u00e9veloppement :</p> <p><code>sh python3 -m pip install -e[dev]</code></p> </li> <li> <p>Consulter les directives de contribution</p> </li> </ul>"},{"location":"#publier-la-suite-doutils-sur-pypi","title":"Publier la suite d'outils sur Pypi","text":"<p>Configurer le fichier <code>$HOME/.pypirc</code> avec les acc\u00e8s \u00e0 votre compte PyPI.</p> <pre><code>python3 -m pip install --upgrade twine\npython3 -m twine upload --repository pypi dist/rok4_tools-1.3.2-py3-none-any.whl dist/rok4_tools-1.3.2.tar.gz\n</code></pre>"},{"location":"CHANGELOG/","title":"Historique des versions","text":""},{"location":"CHANGELOG/#130","title":"1.3.0","text":""},{"location":"CHANGELOG/#added","title":"[Added]","text":"<ul> <li>Outil JOINCACHE g\u00e9n\u00e8rent une pyramide \u00e0 partir d'autres pyramides raster compatibles. Fonctionne en plusieurs modes :<ul> <li>3 pour la g\u00e9n\u00e9ration : master, agent et finisher</li> <li>2 pour l'aide : example et check</li> </ul> </li> <li>Cr\u00e9ation de la classe \"source\" pour charger des sources de donn\u00e9es</li> </ul>"},{"location":"CHANGELOG/#changed","title":"[Changed]","text":"<ul> <li>Division de l'outil PYR2PYR en un fichier principal (pyr2pyr.py) et des fichier par r\u00f4les (pyr2pyr_utils/agent.py, pyr2pyr_utils.master.py, pyr2pyr_utils.finisher.py)</li> <li>Gestion des documentations des diff\u00e9rentes versions avec l'outil mike</li> </ul>"},{"location":"CHANGELOG/#121","title":"1.2.1","text":""},{"location":"CHANGELOG/#added_1","title":"[Added]","text":"<ul> <li>Outil MAKE-LAYER : g\u00e9n\u00e8re un descripteur de couche compatible avec le serveur \u00e0 partir des pyramides de donn\u00e9es \u00e0 utiliser</li> <li>Ajout de la publication PyPI dans la CI GitHub</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"[Changed]","text":"<ul> <li>Renommage pour plus de coh\u00e9rence avec les pratiques :<ul> <li>Le module rok4 est renomm\u00e9 : rok4lib -&gt; rok4</li> <li>Le module d'outil est renomm\u00e9 : rok4tools -&gt; rok4_tools. Le package a le nom rok4-tools</li> <li>Le script make-layer.py -&gt; make_layer.py</li> </ul> </li> <li>Passage de la configuration du projet dans le fichier <code>pyproject.toml</code></li> </ul>"},{"location":"CHANGELOG/#110","title":"1.1.0","text":""},{"location":"CHANGELOG/#changed_2","title":"[Changed]","text":"<ul> <li>Outil PYR2PYR :<ul> <li>Les pyramides source et destination peuvent \u00eatre sur des clusters S3 diff\u00e9rents. Ils sont pr\u00e9cis\u00e9s lors de la recopie des dalles. Pour pr\u00e9ciser le cluster dans le chemin vers le descripteur de la pyramide source (ou l'emplacement de la pyramide destination), il suffit de suffixer le nom du bucket avec <code>@{h\u00f4te du cluster}</code>.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#100","title":"1.0.0","text":""},{"location":"CHANGELOG/#added_2","title":"[Added]","text":"<ul> <li>Outil PYR2PYR de copie de pyramide : copie d'une pyramide d'un stockage \u00e0 une autre. Contr\u00f4le les signatures MD5 si pr\u00e9sente dans le fichier liste. Fonctionne en plusieurs modes :<ul> <li>3 pour la recopie : master, agent et finisher</li> <li>2 pour l'aide : example et check</li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/","title":"Directives de contribution","text":"<p>Merci d'envisager de contribuer \u00e0 ce projet !</p>"},{"location":"CONTRIBUTING/#git-hooks","title":"Git hooks","text":"<p>Nous utilisons les git hooks via pre-commit pour appliquer et v\u00e9rifier automatiquement certaines \"r\u00e8gles\". Veuillez l'installer avant de pousser un commit.</p> <p>Voir le fichier de configuration correspondant : <code>.pre-commit-config.yaml</code>.</p>"},{"location":"CONTRIBUTING/#pull-request","title":"Pull request","text":"<p>Le titre de la PR est utilis\u00e9 pour constituer automatiquement les notes de release. Vous pouvez pr\u00e9ciser en commentaire de votre PR des d\u00e9tails qui seront ajout\u00e9s dans le fichier <code>CHANGELOG.md</code> par les mainteneurs du projet.</p> <p>Le formalisme du changelog est le suivant, en markdown :</p> <pre><code>### [Added]\n\nListe de nouvelles fonctionnalit\u00e9s.\n\n### [Changed]\n\nListe de fonctionnalit\u00e9s existantes modifi\u00e9es.\n\n### [Deprecated]\n\nListe de fonctionnalit\u00e9s d\u00e9pr\u00e9ci\u00e9es.\n\n### [Removed]\n\nListe de foncitonnalit\u00e9s retir\u00e9es.\n\n### [Fixed]\n\nListe de corrections fonctionnelles.\n\n### [Security]\n\nListe de corrections de s\u00e9curit\u00e9.\n</code></pre> <p>Les parties vides, sans \u00e9l\u00e9ment \u00e0 lister, peuvent \u00eatre ignor\u00e9es.</p>"},{"location":"documentation/","title":"Documentation technique","text":""},{"location":"unit-tests/","title":"Rapport des tests unitaires","text":""}]}